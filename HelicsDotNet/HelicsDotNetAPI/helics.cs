//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace gmlc {

public enum helics_core_type {
  helics_core_type_default = 0,
  helics_core_type_zmq = 1,
  helics_core_type_mpi = 2,
  helics_core_type_test = 3,
  helics_core_type_interprocess = 4,
  helics_core_type_ipc = 5,
  helics_core_type_tcp = 6,
  helics_core_type_udp = 7,
  helics_core_type_zmq_test = 10,
  helics_core_type_nng = 9,
  helics_core_type_tcp_ss = 11,
  helics_core_type_http = 12,
  helics_core_type_websocket = 14,
  helics_core_type_inproc = 18,
  helics_core_type_null = 66
}

}
namespace gmlc {

public enum helics_data_type {
  helics_data_type_string = 0,
  helics_data_type_double = 1,
  helics_data_type_int = 2,
  helics_data_type_complex = 3,
  helics_data_type_vector = 4,
  helics_data_type_complex_vector = 5,
  helics_data_type_named_point = 6,
  helics_data_type_boolean = 7,
  helics_data_type_time = 8,
  helics_data_type_raw = 25,
  helics_data_type_multi = 33,
  helics_data_type_any = 25262
}

}
namespace gmlc {

public enum helics_federate_flags {
  helics_flag_observer = 0,
  helics_flag_uninterruptible = 1,
  helics_flag_interruptible = 2,
  helics_flag_source_only = 4,
  helics_flag_only_transmit_on_change = 6,
  helics_flag_only_update_on_change = 8,
  helics_flag_wait_for_current_time_update = 10,
  helics_flag_restrictive_time_policy = 11,
  helics_flag_rollback = 12,
  helics_flag_forward_compute = 14,
  helics_flag_realtime = 16,
  helics_flag_single_thread_federate = 27,
  helics_flag_ignore_time_mismatch_warnings = 67,
  helics_flag_strict_config_checking = 75
}

}
namespace gmlc {

public enum helics_core_flags {
  helics_flag_delay_init_entry = 45,
  helics_flag_enable_init_entry = 47
}

}
namespace gmlc {

public enum helics_flags {
  helics_flag_slow_responding = 29,
  helics_flag_debugging = 31,
  helics_flag_terminate_on_error = 72,
  helics_flag_force_logging_flush = 88,
  helics_flag_dumplog = 89
}

}
namespace gmlc {

public enum helics_log_levels {
  helics_log_level_no_print = -1,
  helics_log_level_error = 0,
  helics_log_level_warning = 1,
  helics_log_level_summary = 2,
  helics_log_level_connections = 3,
  helics_log_level_interfaces = 4,
  helics_log_level_timing = 5,
  helics_log_level_data = 6,
  helics_log_level_trace = 7
}

}
namespace gmlc {

public enum helics_error_types {
  helics_error_fatal = -404,
  helics_error_external_type = -203,
  helics_error_other = -101,
  helics_error_insufficient_space = -18,
  helics_error_execution_failure = -14,
  helics_error_invalid_function_call = -10,
  helics_error_invalid_state_transition = -9,
  helics_warning = -8,
  helics_error_system_failure = -6,
  helics_error_discard = -5,
  helics_error_invalid_argument = -4,
  helics_error_invalid_object = -3,
  helics_error_connection_failure = -2,
  helics_error_registration_failure = -1,
  helics_ok = 0
}

}
namespace gmlc {

public enum helics_properties {
  helics_property_time_delta = 137,
  helics_property_time_period = 140,
  helics_property_time_offset = 141,
  helics_property_time_rt_lag = 143,
  helics_property_time_rt_lead = 144,
  helics_property_time_rt_tolerance = 145,
  helics_property_time_input_delay = 148,
  helics_property_time_output_delay = 150,
  helics_property_int_max_iterations = 259,
  helics_property_int_log_level = 271,
  helics_property_int_file_log_level = 272,
  helics_property_int_console_log_level = 274
}

}
namespace gmlc {

public enum helics_multi_input_mode {
  helics_multi_input_no_op = 0,
  helics_multi_input_vectorize_operation = 1,
  helics_multi_input_and_operation = 2,
  helics_multi_input_or_operation = 3,
  helics_multi_input_sum_operation = 4,
  helics_multi_input_diff_operation = 5,
  helics_multi_input_max_operation = 6,
  helics_multi_input_min_operation = 7,
  helics_multi_input_average_operation = 8
}

}
namespace gmlc {

public enum helics_handle_options {
  helics_handle_option_connection_required = 397,
  helics_handle_option_connection_optional = 402,
  helics_handle_option_single_connection_only = 407,
  helics_handle_option_multiple_connections_allowed = 409,
  helics_handle_option_buffer_data = 411,
  helics_handle_option_strict_type_checking = 414,
  helics_handle_option_ignore_unit_mismatch = 447,
  helics_handle_option_only_transmit_on_change = 452,
  helics_handle_option_only_update_on_change = 454,
  helics_handle_option_ignore_interrupts = 475,
  helics_handle_option_multi_input_handling_method = 507,
  helics_handle_option_input_priority_location = 510,
  helics_handle_option_clear_priority_list = 512,
  helics_handle_option_connections = 522
}

}
namespace gmlc {

public enum helics_filter_type {
  helics_filter_type_custom = 0,
  helics_filter_type_delay = 1,
  helics_filter_type_random_delay = 2,
  helics_filter_type_random_drop = 3,
  helics_filter_type_reroute = 4,
  helics_filter_type_clone = 5,
  helics_filter_type_firewall = 6
}

}
namespace gmlc {

public enum helics_iteration_request {
  helics_iteration_request_no_iteration,
  helics_iteration_request_force_iteration,
  helics_iteration_request_iterate_if_needed
}

}
namespace gmlc {

public enum helics_iteration_result {
  helics_iteration_result_next_step,
  helics_iteration_result_error,
  helics_iteration_result_halted,
  helics_iteration_result_iterating
}

}
namespace gmlc {

public enum helics_federate_state {
  helics_state_startup = 0,
  helics_state_initialization,
  helics_state_execution,
  helics_state_finalize,
  helics_state_error,
  helics_state_pending_init,
  helics_state_pending_exec,
  helics_state_pending_time,
  helics_state_pending_iterative_time,
  helics_state_pending_finalize
}

}
namespace gmlc {

public class helics_complex : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal helics_complex(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(helics_complex obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~helics_complex() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          helicsPINVOKE.delete_helics_complex(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public double real {
    set {
      helicsPINVOKE.helics_complex_real_set(swigCPtr, value);
    } 
    get {
      double ret = helicsPINVOKE.helics_complex_real_get(swigCPtr);
      return ret;
    } 
  }

  public double imag {
    set {
      helicsPINVOKE.helics_complex_imag_set(swigCPtr, value);
    } 
    get {
      double ret = helicsPINVOKE.helics_complex_imag_get(swigCPtr);
      return ret;
    } 
  }

  public helics_complex() : this(helicsPINVOKE.new_helics_complex(), true) {
  }

}

}
namespace gmlc {

public class helics_message : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal helics_message(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(helics_message obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~helics_message() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          helicsPINVOKE.delete_helics_message(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public double time {
    set {
      helicsPINVOKE.helics_message_time_set(swigCPtr, value);
    } 
    get {
      double ret = helicsPINVOKE.helics_message_time_get(swigCPtr);
      return ret;
    } 
  }

  public string data {
    set {
      helicsPINVOKE.helics_message_data_set(swigCPtr, value);
    } 
    get {
      string ret = helicsPINVOKE.helics_message_data_get(swigCPtr);
      return ret;
    } 
  }

  public long length {
    set {
      helicsPINVOKE.helics_message_length_set(swigCPtr, value);
    } 
    get {
      long ret = helicsPINVOKE.helics_message_length_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int32_t messageID {
    set {
      helicsPINVOKE.helics_message_messageID_set(swigCPtr, SWIGTYPE_p_int32_t.getCPtr(value));
      if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_int32_t ret = new SWIGTYPE_p_int32_t(helicsPINVOKE.helics_message_messageID_get(swigCPtr), true);
      if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_int16_t flags {
    set {
      helicsPINVOKE.helics_message_flags_set(swigCPtr, SWIGTYPE_p_int16_t.getCPtr(value));
      if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_int16_t ret = new SWIGTYPE_p_int16_t(helicsPINVOKE.helics_message_flags_get(swigCPtr), true);
      if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string original_source {
    set {
      helicsPINVOKE.helics_message_original_source_set(swigCPtr, value);
    } 
    get {
      string ret = helicsPINVOKE.helics_message_original_source_get(swigCPtr);
      return ret;
    } 
  }

  public string source {
    set {
      helicsPINVOKE.helics_message_source_set(swigCPtr, value);
    } 
    get {
      string ret = helicsPINVOKE.helics_message_source_get(swigCPtr);
      return ret;
    } 
  }

  public string dest {
    set {
      helicsPINVOKE.helics_message_dest_set(swigCPtr, value);
    } 
    get {
      string ret = helicsPINVOKE.helics_message_dest_get(swigCPtr);
      return ret;
    } 
  }

  public string original_dest {
    set {
      helicsPINVOKE.helics_message_original_dest_set(swigCPtr, value);
    } 
    get {
      string ret = helicsPINVOKE.helics_message_original_dest_get(swigCPtr);
      return ret;
    } 
  }

  public helics_message() : this(helicsPINVOKE.new_helics_message(), true) {
  }

}

}
namespace gmlc {

class helicsPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="SWIGRegisterExceptionCallbacks_helics")]
    public static extern void SWIGRegisterExceptionCallbacks_helics(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_helics")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_helics(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new global::System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new global::System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new global::System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new global::System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new global::System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new global::System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new global::System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new global::System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new global::System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new global::System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new global::System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_helics(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_helics(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [global::System.ThreadStatic]
    private static global::System.Exception pendingException = null;
    private static int numExceptionsPending = 0;
    private static global::System.Object exceptionsLock = null;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(global::System.Exception e) {
      if (pendingException != null)
        throw new global::System.ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(exceptionsLock) {
        numExceptionsPending++;
      }
    }

    public static global::System.Exception Retrieve() {
      global::System.Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(exceptionsLock) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }

    static SWIGPendingException() {
      exceptionsLock = new global::System.Object();
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="SWIGRegisterStringCallback_helics")]
    public static extern void SWIGRegisterStringCallback_helics(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_helics(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static helicsPINVOKE() {
  }


  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helics_time_zero_get")]
  public static extern double helics_time_zero_get();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helics_time_epsilon_get")]
  public static extern double helics_time_epsilon_get();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helics_time_invalid_get")]
  public static extern double helics_time_invalid_get();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helics_time_maxtime_get")]
  public static extern double helics_time_maxtime_get();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helics_true_get")]
  public static extern int helics_true_get();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helics_false_get")]
  public static extern int helics_false_get();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helics_complex_real_set")]
  public static extern void helics_complex_real_set(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helics_complex_real_get")]
  public static extern double helics_complex_real_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helics_complex_imag_set")]
  public static extern void helics_complex_imag_set(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helics_complex_imag_get")]
  public static extern double helics_complex_imag_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_new_helics_complex")]
  public static extern global::System.IntPtr new_helics_complex();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_delete_helics_complex")]
  public static extern void delete_helics_complex(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helics_message_time_set")]
  public static extern void helics_message_time_set(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helics_message_time_get")]
  public static extern double helics_message_time_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helics_message_data_set")]
  public static extern void helics_message_data_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helics_message_data_get")]
  public static extern string helics_message_data_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helics_message_length_set")]
  public static extern void helics_message_length_set(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helics_message_length_get")]
  public static extern long helics_message_length_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helics_message_messageID_set")]
  public static extern void helics_message_messageID_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helics_message_messageID_get")]
  public static extern global::System.IntPtr helics_message_messageID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helics_message_flags_set")]
  public static extern void helics_message_flags_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helics_message_flags_get")]
  public static extern global::System.IntPtr helics_message_flags_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helics_message_original_source_set")]
  public static extern void helics_message_original_source_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helics_message_original_source_get")]
  public static extern string helics_message_original_source_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helics_message_source_set")]
  public static extern void helics_message_source_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helics_message_source_get")]
  public static extern string helics_message_source_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helics_message_dest_set")]
  public static extern void helics_message_dest_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helics_message_dest_get")]
  public static extern string helics_message_dest_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helics_message_original_dest_set")]
  public static extern void helics_message_original_dest_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helics_message_original_dest_get")]
  public static extern string helics_message_original_dest_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_new_helics_message")]
  public static extern global::System.IntPtr new_helics_message();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_delete_helics_message")]
  public static extern void delete_helics_message(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsGetVersion")]
  public static extern string helicsGetVersion();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsGetBuildFlags")]
  public static extern string helicsGetBuildFlags();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsGetCompilerVersion")]
  public static extern string helicsGetCompilerVersion();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsIsCoreTypeAvailable")]
  public static extern int helicsIsCoreTypeAvailable(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsCreateCore")]
  public static extern global::System.IntPtr helicsCreateCore(string jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsCreateCoreFromArgs")]
  public static extern global::System.IntPtr helicsCreateCoreFromArgs(string jarg1, string jarg2, int jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsCoreClone")]
  public static extern global::System.IntPtr helicsCoreClone(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsCoreIsValid")]
  public static extern int helicsCoreIsValid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsCreateBroker")]
  public static extern global::System.IntPtr helicsCreateBroker(string jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsCreateBrokerFromArgs")]
  public static extern global::System.IntPtr helicsCreateBrokerFromArgs(string jarg1, string jarg2, int jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsBrokerClone")]
  public static extern global::System.IntPtr helicsBrokerClone(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsBrokerIsValid")]
  public static extern int helicsBrokerIsValid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsBrokerIsConnected")]
  public static extern int helicsBrokerIsConnected(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsBrokerDataLink")]
  public static extern void helicsBrokerDataLink(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsBrokerAddSourceFilterToEndpoint")]
  public static extern void helicsBrokerAddSourceFilterToEndpoint(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsBrokerAddDestinationFilterToEndpoint")]
  public static extern void helicsBrokerAddDestinationFilterToEndpoint(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsBrokerMakeConnections")]
  public static extern void helicsBrokerMakeConnections(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsCoreWaitForDisconnect")]
  public static extern int helicsCoreWaitForDisconnect(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsBrokerWaitForDisconnect")]
  public static extern int helicsBrokerWaitForDisconnect(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsCoreIsConnected")]
  public static extern int helicsCoreIsConnected(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsCoreDataLink")]
  public static extern void helicsCoreDataLink(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsCoreAddSourceFilterToEndpoint")]
  public static extern void helicsCoreAddSourceFilterToEndpoint(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsCoreAddDestinationFilterToEndpoint")]
  public static extern void helicsCoreAddDestinationFilterToEndpoint(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsCoreMakeConnections")]
  public static extern void helicsCoreMakeConnections(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsBrokerGetIdentifier")]
  public static extern string helicsBrokerGetIdentifier(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsCoreGetIdentifier")]
  public static extern string helicsCoreGetIdentifier(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsBrokerGetAddress")]
  public static extern string helicsBrokerGetAddress(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsCoreGetAddress")]
  public static extern string helicsCoreGetAddress(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsCoreSetReadyToInit")]
  public static extern void helicsCoreSetReadyToInit(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsCoreConnect")]
  public static extern int helicsCoreConnect(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsCoreDisconnect")]
  public static extern void helicsCoreDisconnect(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsGetFederateByName")]
  public static extern global::System.IntPtr helicsGetFederateByName(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsBrokerDisconnect")]
  public static extern void helicsBrokerDisconnect(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateDestroy")]
  public static extern void helicsFederateDestroy(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsBrokerDestroy")]
  public static extern void helicsBrokerDestroy(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsCoreDestroy")]
  public static extern void helicsCoreDestroy(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsCoreFree")]
  public static extern void helicsCoreFree(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsBrokerFree")]
  public static extern void helicsBrokerFree(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsCreateValueFederate")]
  public static extern global::System.IntPtr helicsCreateValueFederate(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsCreateValueFederateFromConfig")]
  public static extern global::System.IntPtr helicsCreateValueFederateFromConfig(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsCreateMessageFederate")]
  public static extern global::System.IntPtr helicsCreateMessageFederate(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsCreateMessageFederateFromConfig")]
  public static extern global::System.IntPtr helicsCreateMessageFederateFromConfig(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsCreateCombinationFederate")]
  public static extern global::System.IntPtr helicsCreateCombinationFederate(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsCreateCombinationFederateFromConfig")]
  public static extern global::System.IntPtr helicsCreateCombinationFederateFromConfig(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateClone")]
  public static extern global::System.IntPtr helicsFederateClone(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsCreateFederateInfo")]
  public static extern global::System.IntPtr helicsCreateFederateInfo();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateInfoClone")]
  public static extern global::System.IntPtr helicsFederateInfoClone(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateInfoLoadFromArgs")]
  public static extern void helicsFederateInfoLoadFromArgs(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateInfoFree")]
  public static extern void helicsFederateInfoFree(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateIsValid")]
  public static extern int helicsFederateIsValid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateInfoSetCoreName")]
  public static extern void helicsFederateInfoSetCoreName(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateInfoSetCoreInitString")]
  public static extern void helicsFederateInfoSetCoreInitString(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateInfoSetBrokerInitString")]
  public static extern void helicsFederateInfoSetBrokerInitString(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateInfoSetCoreType")]
  public static extern void helicsFederateInfoSetCoreType(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateInfoSetCoreTypeFromString")]
  public static extern void helicsFederateInfoSetCoreTypeFromString(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateInfoSetBroker")]
  public static extern void helicsFederateInfoSetBroker(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateInfoSetBrokerKey")]
  public static extern void helicsFederateInfoSetBrokerKey(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateInfoSetBrokerPort")]
  public static extern void helicsFederateInfoSetBrokerPort(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateInfoSetLocalPort")]
  public static extern void helicsFederateInfoSetLocalPort(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsGetPropertyIndex")]
  public static extern int helicsGetPropertyIndex(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsGetFlagIndex")]
  public static extern int helicsGetFlagIndex(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsGetOptionIndex")]
  public static extern int helicsGetOptionIndex(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsGetOptionValue")]
  public static extern int helicsGetOptionValue(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateInfoSetFlagOption")]
  public static extern void helicsFederateInfoSetFlagOption(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateInfoSetSeparator")]
  public static extern void helicsFederateInfoSetSeparator(global::System.Runtime.InteropServices.HandleRef jarg1, char jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateInfoSetTimeProperty")]
  public static extern void helicsFederateInfoSetTimeProperty(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateInfoSetIntegerProperty")]
  public static extern void helicsFederateInfoSetIntegerProperty(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateRegisterInterfaces")]
  public static extern void helicsFederateRegisterInterfaces(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateGlobalError")]
  public static extern void helicsFederateGlobalError(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateLocalError")]
  public static extern void helicsFederateLocalError(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateFinalize")]
  public static extern void helicsFederateFinalize(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateFinalizeAsync")]
  public static extern void helicsFederateFinalizeAsync(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateFinalizeComplete")]
  public static extern void helicsFederateFinalizeComplete(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateFree")]
  public static extern void helicsFederateFree(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsCloseLibrary")]
  public static extern void helicsCloseLibrary();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateEnterInitializingMode")]
  public static extern void helicsFederateEnterInitializingMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateEnterInitializingModeAsync")]
  public static extern void helicsFederateEnterInitializingModeAsync(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateIsAsyncOperationCompleted")]
  public static extern int helicsFederateIsAsyncOperationCompleted(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateEnterInitializingModeComplete")]
  public static extern void helicsFederateEnterInitializingModeComplete(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateEnterExecutingMode")]
  public static extern void helicsFederateEnterExecutingMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateEnterExecutingModeAsync")]
  public static extern void helicsFederateEnterExecutingModeAsync(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateEnterExecutingModeComplete")]
  public static extern void helicsFederateEnterExecutingModeComplete(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateEnterExecutingModeIterative")]
  public static extern int helicsFederateEnterExecutingModeIterative(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateEnterExecutingModeIterativeAsync")]
  public static extern void helicsFederateEnterExecutingModeIterativeAsync(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateEnterExecutingModeIterativeComplete")]
  public static extern int helicsFederateEnterExecutingModeIterativeComplete(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateGetState")]
  public static extern int helicsFederateGetState(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateGetCoreObject")]
  public static extern global::System.IntPtr helicsFederateGetCoreObject(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateRequestTime")]
  public static extern double helicsFederateRequestTime(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateRequestTimeAdvance")]
  public static extern double helicsFederateRequestTimeAdvance(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateRequestNextStep")]
  public static extern double helicsFederateRequestNextStep(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateRequestTimeIterative")]
  public static extern double helicsFederateRequestTimeIterative(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2, int jarg3, out int jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateRequestTimeAsync")]
  public static extern void helicsFederateRequestTimeAsync(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateRequestTimeComplete")]
  public static extern double helicsFederateRequestTimeComplete(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateRequestTimeIterativeAsync")]
  public static extern void helicsFederateRequestTimeIterativeAsync(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateRequestTimeIterativeComplete")]
  public static extern double helicsFederateRequestTimeIterativeComplete(global::System.Runtime.InteropServices.HandleRef jarg1, out int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateGetName")]
  public static extern string helicsFederateGetName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateSetTimeProperty")]
  public static extern void helicsFederateSetTimeProperty(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateSetFlagOption")]
  public static extern void helicsFederateSetFlagOption(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateSetSeparator")]
  public static extern void helicsFederateSetSeparator(global::System.Runtime.InteropServices.HandleRef jarg1, char jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateSetIntegerProperty")]
  public static extern void helicsFederateSetIntegerProperty(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateGetTimeProperty")]
  public static extern double helicsFederateGetTimeProperty(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateGetFlagOption")]
  public static extern int helicsFederateGetFlagOption(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateGetIntegerProperty")]
  public static extern int helicsFederateGetIntegerProperty(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateGetCurrentTime")]
  public static extern double helicsFederateGetCurrentTime(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateSetGlobal")]
  public static extern void helicsFederateSetGlobal(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateAddDependency")]
  public static extern void helicsFederateAddDependency(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateSetLogFile")]
  public static extern void helicsFederateSetLogFile(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateLogErrorMessage")]
  public static extern void helicsFederateLogErrorMessage(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateLogWarningMessage")]
  public static extern void helicsFederateLogWarningMessage(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateLogInfoMessage")]
  public static extern void helicsFederateLogInfoMessage(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateLogDebugMessage")]
  public static extern void helicsFederateLogDebugMessage(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateLogLevelMessage")]
  public static extern void helicsFederateLogLevelMessage(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsCoreSetGlobal")]
  public static extern void helicsCoreSetGlobal(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsBrokerSetGlobal")]
  public static extern void helicsBrokerSetGlobal(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsCoreSetLogFile")]
  public static extern void helicsCoreSetLogFile(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsBrokerSetLogFile")]
  public static extern void helicsBrokerSetLogFile(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsBrokerSetTimeBarrier")]
  public static extern void helicsBrokerSetTimeBarrier(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsBrokerClearTimeBarrier")]
  public static extern void helicsBrokerClearTimeBarrier(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsCreateQuery")]
  public static extern global::System.IntPtr helicsCreateQuery(string jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsQueryExecute")]
  public static extern string helicsQueryExecute(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsQueryCoreExecute")]
  public static extern string helicsQueryCoreExecute(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsQueryBrokerExecute")]
  public static extern string helicsQueryBrokerExecute(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsQueryExecuteAsync")]
  public static extern void helicsQueryExecuteAsync(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsQueryExecuteComplete")]
  public static extern string helicsQueryExecuteComplete(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsQueryIsCompleted")]
  public static extern int helicsQueryIsCompleted(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsQuerySetTarget")]
  public static extern void helicsQuerySetTarget(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsQuerySetQueryString")]
  public static extern void helicsQuerySetQueryString(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsQueryFree")]
  public static extern void helicsQueryFree(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsCleanupLibrary")]
  public static extern void helicsCleanupLibrary();

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateRegisterSubscription")]
  public static extern global::System.IntPtr helicsFederateRegisterSubscription(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateRegisterPublication")]
  public static extern global::System.IntPtr helicsFederateRegisterPublication(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, int jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateRegisterTypePublication")]
  public static extern global::System.IntPtr helicsFederateRegisterTypePublication(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateRegisterGlobalPublication")]
  public static extern global::System.IntPtr helicsFederateRegisterGlobalPublication(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, int jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateRegisterGlobalTypePublication")]
  public static extern global::System.IntPtr helicsFederateRegisterGlobalTypePublication(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateRegisterInput")]
  public static extern global::System.IntPtr helicsFederateRegisterInput(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, int jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateRegisterTypeInput")]
  public static extern global::System.IntPtr helicsFederateRegisterTypeInput(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateRegisterGlobalInput")]
  public static extern global::System.IntPtr helicsFederateRegisterGlobalInput(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, int jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateRegisterGlobalTypeInput")]
  public static extern global::System.IntPtr helicsFederateRegisterGlobalTypeInput(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateGetPublication")]
  public static extern global::System.IntPtr helicsFederateGetPublication(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateGetPublicationByIndex")]
  public static extern global::System.IntPtr helicsFederateGetPublicationByIndex(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateGetInput")]
  public static extern global::System.IntPtr helicsFederateGetInput(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateGetInputByIndex")]
  public static extern global::System.IntPtr helicsFederateGetInputByIndex(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateGetSubscription")]
  public static extern global::System.IntPtr helicsFederateGetSubscription(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateClearUpdates")]
  public static extern void helicsFederateClearUpdates(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateRegisterFromPublicationJSON")]
  public static extern void helicsFederateRegisterFromPublicationJSON(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederatePublishJSON")]
  public static extern void helicsFederatePublishJSON(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsPublicationIsValid")]
  public static extern int helicsPublicationIsValid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsPublicationPublishRaw")]
  public static extern void helicsPublicationPublishRaw(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsPublicationPublishString")]
  public static extern void helicsPublicationPublishString(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsPublicationPublishInteger")]
  public static extern void helicsPublicationPublishInteger(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsPublicationPublishBoolean")]
  public static extern void helicsPublicationPublishBoolean(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsPublicationPublishDouble")]
  public static extern void helicsPublicationPublishDouble(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsPublicationPublishTime")]
  public static extern void helicsPublicationPublishTime(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsPublicationPublishChar")]
  public static extern void helicsPublicationPublishChar(global::System.Runtime.InteropServices.HandleRef jarg1, char jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsPublicationPublishComplex")]
  public static extern void helicsPublicationPublishComplex(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsPublicationPublishVector")]
  public static extern void helicsPublicationPublishVector(global::System.Runtime.InteropServices.HandleRef jarg1, out double jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsPublicationPublishNamedPoint")]
  public static extern void helicsPublicationPublishNamedPoint(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsPublicationAddTarget")]
  public static extern void helicsPublicationAddTarget(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputIsValid")]
  public static extern int helicsInputIsValid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputAddTarget")]
  public static extern void helicsInputAddTarget(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputGetRawValueSize")]
  public static extern int helicsInputGetRawValueSize(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputGetRawValue")]
  public static extern void helicsInputGetRawValue(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, out int jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputGetStringSize")]
  public static extern int helicsInputGetStringSize(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputGetString")]
  public static extern void helicsInputGetString(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, int jarg3, out int jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputGetInteger")]
  public static extern long helicsInputGetInteger(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputGetBoolean")]
  public static extern int helicsInputGetBoolean(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputGetDouble")]
  public static extern double helicsInputGetDouble(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputGetTime")]
  public static extern double helicsInputGetTime(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputGetChar")]
  public static extern char helicsInputGetChar(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputGetComplexObject")]
  public static extern global::System.IntPtr helicsInputGetComplexObject(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputGetComplex")]
  public static extern void helicsInputGetComplex(global::System.Runtime.InteropServices.HandleRef jarg1, out double jarg2, out double jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputGetVectorSize")]
  public static extern int helicsInputGetVectorSize(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputGetVector")]
  public static extern void helicsInputGetVector(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, out int jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputGetNamedPoint")]
  public static extern void helicsInputGetNamedPoint(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, int jarg3, out int jarg4, out double jarg5);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputSetDefaultRaw")]
  public static extern void helicsInputSetDefaultRaw(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputSetDefaultString")]
  public static extern void helicsInputSetDefaultString(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputSetDefaultInteger")]
  public static extern void helicsInputSetDefaultInteger(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputSetDefaultBoolean")]
  public static extern void helicsInputSetDefaultBoolean(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputSetDefaultTime")]
  public static extern void helicsInputSetDefaultTime(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputSetDefaultChar")]
  public static extern void helicsInputSetDefaultChar(global::System.Runtime.InteropServices.HandleRef jarg1, char jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputSetDefaultDouble")]
  public static extern void helicsInputSetDefaultDouble(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputSetDefaultComplex")]
  public static extern void helicsInputSetDefaultComplex(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputSetDefaultVector")]
  public static extern void helicsInputSetDefaultVector(global::System.Runtime.InteropServices.HandleRef jarg1, out double jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputSetDefaultNamedPoint")]
  public static extern void helicsInputSetDefaultNamedPoint(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputGetType")]
  public static extern string helicsInputGetType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputGetPublicationType")]
  public static extern string helicsInputGetPublicationType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsPublicationGetType")]
  public static extern string helicsPublicationGetType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputGetKey")]
  public static extern string helicsInputGetKey(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsSubscriptionGetKey")]
  public static extern string helicsSubscriptionGetKey(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsPublicationGetKey")]
  public static extern string helicsPublicationGetKey(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputGetUnits")]
  public static extern string helicsInputGetUnits(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputGetInjectionUnits")]
  public static extern string helicsInputGetInjectionUnits(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputGetExtractionUnits")]
  public static extern string helicsInputGetExtractionUnits(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsPublicationGetUnits")]
  public static extern string helicsPublicationGetUnits(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputGetInfo")]
  public static extern string helicsInputGetInfo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputSetInfo")]
  public static extern void helicsInputSetInfo(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsPublicationGetInfo")]
  public static extern string helicsPublicationGetInfo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsPublicationSetInfo")]
  public static extern void helicsPublicationSetInfo(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputGetOption")]
  public static extern int helicsInputGetOption(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputSetOption")]
  public static extern void helicsInputSetOption(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsPublicationGetOption")]
  public static extern int helicsPublicationGetOption(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsPublicationSetOption")]
  public static extern void helicsPublicationSetOption(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsPublicationSetMinimumChange")]
  public static extern void helicsPublicationSetMinimumChange(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputSetMinimumChange")]
  public static extern void helicsInputSetMinimumChange(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputIsUpdated")]
  public static extern int helicsInputIsUpdated(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputLastUpdateTime")]
  public static extern double helicsInputLastUpdateTime(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsInputClearUpdate")]
  public static extern void helicsInputClearUpdate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateGetPublicationCount")]
  public static extern int helicsFederateGetPublicationCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateGetInputCount")]
  public static extern int helicsFederateGetInputCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateRegisterEndpoint")]
  public static extern global::System.IntPtr helicsFederateRegisterEndpoint(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateRegisterGlobalEndpoint")]
  public static extern global::System.IntPtr helicsFederateRegisterGlobalEndpoint(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateGetEndpoint")]
  public static extern global::System.IntPtr helicsFederateGetEndpoint(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateGetEndpointByIndex")]
  public static extern global::System.IntPtr helicsFederateGetEndpointByIndex(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsEndpointIsValid")]
  public static extern int helicsEndpointIsValid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsEndpointSetDefaultDestination")]
  public static extern void helicsEndpointSetDefaultDestination(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsEndpointGetDefaultDestination")]
  public static extern string helicsEndpointGetDefaultDestination(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsEndpointSendMessageRaw")]
  public static extern void helicsEndpointSendMessageRaw(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsEndpointSendEventRaw")]
  public static extern void helicsEndpointSendEventRaw(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4, double jarg5);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsEndpointSendMessage")]
  public static extern void helicsEndpointSendMessage(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsEndpointSendMessageObject")]
  public static extern void helicsEndpointSendMessageObject(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsEndpointSendMessageObjectZeroCopy")]
  public static extern void helicsEndpointSendMessageObjectZeroCopy(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsEndpointSubscribe")]
  public static extern void helicsEndpointSubscribe(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateHasMessage")]
  public static extern int helicsFederateHasMessage(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsEndpointHasMessage")]
  public static extern int helicsEndpointHasMessage(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederatePendingMessages")]
  public static extern int helicsFederatePendingMessages(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsEndpointPendingMessages")]
  public static extern int helicsEndpointPendingMessages(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsEndpointGetMessage")]
  public static extern global::System.IntPtr helicsEndpointGetMessage(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsEndpointGetMessageObject")]
  public static extern global::System.IntPtr helicsEndpointGetMessageObject(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsEndpointCreateMessageObject")]
  public static extern global::System.IntPtr helicsEndpointCreateMessageObject(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateGetMessage")]
  public static extern global::System.IntPtr helicsFederateGetMessage(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateGetMessageObject")]
  public static extern global::System.IntPtr helicsFederateGetMessageObject(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateCreateMessageObject")]
  public static extern global::System.IntPtr helicsFederateCreateMessageObject(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateClearMessages")]
  public static extern void helicsFederateClearMessages(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsEndpointClearMessages")]
  public static extern void helicsEndpointClearMessages(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsEndpointGetType")]
  public static extern string helicsEndpointGetType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsEndpointGetName")]
  public static extern string helicsEndpointGetName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateGetEndpointCount")]
  public static extern int helicsFederateGetEndpointCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsEndpointGetInfo")]
  public static extern string helicsEndpointGetInfo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsEndpointSetInfo")]
  public static extern void helicsEndpointSetInfo(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsEndpointSetOption")]
  public static extern void helicsEndpointSetOption(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsEndpointGetOption")]
  public static extern int helicsEndpointGetOption(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsMessageGetSource")]
  public static extern string helicsMessageGetSource(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsMessageGetDestination")]
  public static extern string helicsMessageGetDestination(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsMessageGetOriginalSource")]
  public static extern string helicsMessageGetOriginalSource(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsMessageGetOriginalDestination")]
  public static extern string helicsMessageGetOriginalDestination(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsMessageGetTime")]
  public static extern double helicsMessageGetTime(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsMessageGetString")]
  public static extern string helicsMessageGetString(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsMessageGetMessageID")]
  public static extern int helicsMessageGetMessageID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsMessageCheckFlag")]
  public static extern int helicsMessageCheckFlag(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsMessageGetRawDataSize")]
  public static extern int helicsMessageGetRawDataSize(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsMessageGetRawData")]
  public static extern void helicsMessageGetRawData(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, out int jarg4);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsMessageIsValid")]
  public static extern int helicsMessageIsValid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsMessageSetSource")]
  public static extern void helicsMessageSetSource(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsMessageSetDestination")]
  public static extern void helicsMessageSetDestination(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsMessageSetOriginalSource")]
  public static extern void helicsMessageSetOriginalSource(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsMessageSetOriginalDestination")]
  public static extern void helicsMessageSetOriginalDestination(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsMessageSetTime")]
  public static extern void helicsMessageSetTime(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsMessageReserve")]
  public static extern void helicsMessageReserve(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsMessageSetMessageID")]
  public static extern void helicsMessageSetMessageID(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsMessageClearFlags")]
  public static extern void helicsMessageClearFlags(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsMessageSetFlagOption")]
  public static extern void helicsMessageSetFlagOption(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsMessageSetString")]
  public static extern void helicsMessageSetString(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsMessageSetData")]
  public static extern void helicsMessageSetData(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsMessageAppendData")]
  public static extern void helicsMessageAppendData(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsMessageCopy")]
  public static extern void helicsMessageCopy(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsMessageClone")]
  public static extern global::System.IntPtr helicsMessageClone(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsMessageFree")]
  public static extern void helicsMessageFree(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsMessageClear")]
  public static extern void helicsMessageClear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateRegisterFilter")]
  public static extern global::System.IntPtr helicsFederateRegisterFilter(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateRegisterGlobalFilter")]
  public static extern global::System.IntPtr helicsFederateRegisterGlobalFilter(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateRegisterCloningFilter")]
  public static extern global::System.IntPtr helicsFederateRegisterCloningFilter(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateRegisterGlobalCloningFilter")]
  public static extern global::System.IntPtr helicsFederateRegisterGlobalCloningFilter(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsCoreRegisterFilter")]
  public static extern global::System.IntPtr helicsCoreRegisterFilter(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsCoreRegisterCloningFilter")]
  public static extern global::System.IntPtr helicsCoreRegisterCloningFilter(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateGetFilterCount")]
  public static extern int helicsFederateGetFilterCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateGetFilter")]
  public static extern global::System.IntPtr helicsFederateGetFilter(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFederateGetFilterByIndex")]
  public static extern global::System.IntPtr helicsFederateGetFilterByIndex(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFilterIsValid")]
  public static extern int helicsFilterIsValid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFilterGetName")]
  public static extern string helicsFilterGetName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFilterSet")]
  public static extern void helicsFilterSet(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFilterSetString")]
  public static extern void helicsFilterSetString(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFilterAddDestinationTarget")]
  public static extern void helicsFilterAddDestinationTarget(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFilterAddSourceTarget")]
  public static extern void helicsFilterAddSourceTarget(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFilterAddDeliveryEndpoint")]
  public static extern void helicsFilterAddDeliveryEndpoint(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFilterRemoveTarget")]
  public static extern void helicsFilterRemoveTarget(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFilterRemoveDeliveryEndpoint")]
  public static extern void helicsFilterRemoveDeliveryEndpoint(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFilterGetInfo")]
  public static extern string helicsFilterGetInfo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFilterSetInfo")]
  public static extern void helicsFilterSetInfo(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFilterSetOption")]
  public static extern void helicsFilterSetOption(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CShelics", EntryPoint="CSharp_gmlc_helicsFilterGetOption")]
  public static extern int helicsFilterGetOption(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);
}

}
namespace gmlc {

public class helics {
  public static double helics_time_zero {
    get {
      double ret = helicsPINVOKE.helics_time_zero_get();
      return ret;
    } 
  }

  public static double helics_time_epsilon {
    get {
      double ret = helicsPINVOKE.helics_time_epsilon_get();
      return ret;
    } 
  }

  public static double helics_time_invalid {
    get {
      double ret = helicsPINVOKE.helics_time_invalid_get();
      return ret;
    } 
  }

  public static double helics_time_maxtime {
    get {
      double ret = helicsPINVOKE.helics_time_maxtime_get();
      return ret;
    } 
  }

  public static int helics_true {
    get {
      int ret = helicsPINVOKE.helics_true_get();
      return ret;
    } 
  }

  public static int helics_false {
    get {
      int ret = helicsPINVOKE.helics_false_get();
      return ret;
    } 
  }

  public static string helicsGetVersion() {
    string ret = helicsPINVOKE.helicsGetVersion();
    return ret;
  }

  public static string helicsGetBuildFlags() {
    string ret = helicsPINVOKE.helicsGetBuildFlags();
    return ret;
  }

  public static string helicsGetCompilerVersion() {
    string ret = helicsPINVOKE.helicsGetCompilerVersion();
    return ret;
  }

  public static int helicsIsCoreTypeAvailable(string type) {
    int ret = helicsPINVOKE.helicsIsCoreTypeAvailable(type);
    return ret;
  }

  public static SWIGTYPE_p_void helicsCreateCore(string type, string name, string initString) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsCreateCore(type, name, initString);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsCreateCoreFromArgs(string type, string name, int argc, SWIGTYPE_p_p_char argv) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsCreateCoreFromArgs(type, name, argc, SWIGTYPE_p_p_char.getCPtr(argv));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsCoreClone(SWIGTYPE_p_void core) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsCoreClone(SWIGTYPE_p_void.getCPtr(core));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int helicsCoreIsValid(SWIGTYPE_p_void core) {
    int ret = helicsPINVOKE.helicsCoreIsValid(SWIGTYPE_p_void.getCPtr(core));
    return ret;
  }

  public static SWIGTYPE_p_void helicsCreateBroker(string type, string name, string initString) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsCreateBroker(type, name, initString);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsCreateBrokerFromArgs(string type, string name, int argc, SWIGTYPE_p_p_char argv) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsCreateBrokerFromArgs(type, name, argc, SWIGTYPE_p_p_char.getCPtr(argv));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsBrokerClone(SWIGTYPE_p_void broker) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsBrokerClone(SWIGTYPE_p_void.getCPtr(broker));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int helicsBrokerIsValid(SWIGTYPE_p_void broker) {
    int ret = helicsPINVOKE.helicsBrokerIsValid(SWIGTYPE_p_void.getCPtr(broker));
    return ret;
  }

  public static int helicsBrokerIsConnected(SWIGTYPE_p_void broker) {
    int ret = helicsPINVOKE.helicsBrokerIsConnected(SWIGTYPE_p_void.getCPtr(broker));
    return ret;
  }

  public static void helicsBrokerDataLink(SWIGTYPE_p_void broker, string source, string target) {
    helicsPINVOKE.helicsBrokerDataLink(SWIGTYPE_p_void.getCPtr(broker), source, target);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsBrokerAddSourceFilterToEndpoint(SWIGTYPE_p_void broker, string filter, string endpoint) {
    helicsPINVOKE.helicsBrokerAddSourceFilterToEndpoint(SWIGTYPE_p_void.getCPtr(broker), filter, endpoint);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsBrokerAddDestinationFilterToEndpoint(SWIGTYPE_p_void broker, string filter, string endpoint) {
    helicsPINVOKE.helicsBrokerAddDestinationFilterToEndpoint(SWIGTYPE_p_void.getCPtr(broker), filter, endpoint);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsBrokerMakeConnections(SWIGTYPE_p_void broker, string file) {
    helicsPINVOKE.helicsBrokerMakeConnections(SWIGTYPE_p_void.getCPtr(broker), file);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int helicsCoreWaitForDisconnect(SWIGTYPE_p_void core, int msToWait) {
    int ret = helicsPINVOKE.helicsCoreWaitForDisconnect(SWIGTYPE_p_void.getCPtr(core), msToWait);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int helicsBrokerWaitForDisconnect(SWIGTYPE_p_void broker, int msToWait) {
    int ret = helicsPINVOKE.helicsBrokerWaitForDisconnect(SWIGTYPE_p_void.getCPtr(broker), msToWait);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int helicsCoreIsConnected(SWIGTYPE_p_void core) {
    int ret = helicsPINVOKE.helicsCoreIsConnected(SWIGTYPE_p_void.getCPtr(core));
    return ret;
  }

  public static void helicsCoreDataLink(SWIGTYPE_p_void core, string source, string target) {
    helicsPINVOKE.helicsCoreDataLink(SWIGTYPE_p_void.getCPtr(core), source, target);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsCoreAddSourceFilterToEndpoint(SWIGTYPE_p_void core, string filter, string endpoint) {
    helicsPINVOKE.helicsCoreAddSourceFilterToEndpoint(SWIGTYPE_p_void.getCPtr(core), filter, endpoint);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsCoreAddDestinationFilterToEndpoint(SWIGTYPE_p_void core, string filter, string endpoint) {
    helicsPINVOKE.helicsCoreAddDestinationFilterToEndpoint(SWIGTYPE_p_void.getCPtr(core), filter, endpoint);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsCoreMakeConnections(SWIGTYPE_p_void core, string file) {
    helicsPINVOKE.helicsCoreMakeConnections(SWIGTYPE_p_void.getCPtr(core), file);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string helicsBrokerGetIdentifier(SWIGTYPE_p_void broker) {
    string ret = helicsPINVOKE.helicsBrokerGetIdentifier(SWIGTYPE_p_void.getCPtr(broker));
    return ret;
  }

  public static string helicsCoreGetIdentifier(SWIGTYPE_p_void core) {
    string ret = helicsPINVOKE.helicsCoreGetIdentifier(SWIGTYPE_p_void.getCPtr(core));
    return ret;
  }

  public static string helicsBrokerGetAddress(SWIGTYPE_p_void broker) {
    string ret = helicsPINVOKE.helicsBrokerGetAddress(SWIGTYPE_p_void.getCPtr(broker));
    return ret;
  }

  public static string helicsCoreGetAddress(SWIGTYPE_p_void core) {
    string ret = helicsPINVOKE.helicsCoreGetAddress(SWIGTYPE_p_void.getCPtr(core));
    return ret;
  }

  public static void helicsCoreSetReadyToInit(SWIGTYPE_p_void core) {
    helicsPINVOKE.helicsCoreSetReadyToInit(SWIGTYPE_p_void.getCPtr(core));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int helicsCoreConnect(SWIGTYPE_p_void core) {
    int ret = helicsPINVOKE.helicsCoreConnect(SWIGTYPE_p_void.getCPtr(core));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void helicsCoreDisconnect(SWIGTYPE_p_void core) {
    helicsPINVOKE.helicsCoreDisconnect(SWIGTYPE_p_void.getCPtr(core));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_void helicsGetFederateByName(string fedName) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsGetFederateByName(fedName);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void helicsBrokerDisconnect(SWIGTYPE_p_void broker) {
    helicsPINVOKE.helicsBrokerDisconnect(SWIGTYPE_p_void.getCPtr(broker));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateDestroy(SWIGTYPE_p_void fed) {
    helicsPINVOKE.helicsFederateDestroy(SWIGTYPE_p_void.getCPtr(fed));
  }

  public static void helicsBrokerDestroy(SWIGTYPE_p_void broker) {
    helicsPINVOKE.helicsBrokerDestroy(SWIGTYPE_p_void.getCPtr(broker));
  }

  public static void helicsCoreDestroy(SWIGTYPE_p_void core) {
    helicsPINVOKE.helicsCoreDestroy(SWIGTYPE_p_void.getCPtr(core));
  }

  public static void helicsCoreFree(SWIGTYPE_p_void core) {
    helicsPINVOKE.helicsCoreFree(SWIGTYPE_p_void.getCPtr(core));
  }

  public static void helicsBrokerFree(SWIGTYPE_p_void broker) {
    helicsPINVOKE.helicsBrokerFree(SWIGTYPE_p_void.getCPtr(broker));
  }

  public static SWIGTYPE_p_void helicsCreateValueFederate(string fedName, SWIGTYPE_p_void fi) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsCreateValueFederate(fedName, SWIGTYPE_p_void.getCPtr(fi));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsCreateValueFederateFromConfig(string configFile) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsCreateValueFederateFromConfig(configFile);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsCreateMessageFederate(string fedName, SWIGTYPE_p_void fi) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsCreateMessageFederate(fedName, SWIGTYPE_p_void.getCPtr(fi));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsCreateMessageFederateFromConfig(string configFile) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsCreateMessageFederateFromConfig(configFile);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsCreateCombinationFederate(string fedName, SWIGTYPE_p_void fi) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsCreateCombinationFederate(fedName, SWIGTYPE_p_void.getCPtr(fi));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsCreateCombinationFederateFromConfig(string configFile) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsCreateCombinationFederateFromConfig(configFile);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateClone(SWIGTYPE_p_void fed) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateClone(SWIGTYPE_p_void.getCPtr(fed));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsCreateFederateInfo() {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsCreateFederateInfo();
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateInfoClone(SWIGTYPE_p_void fi) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateInfoClone(SWIGTYPE_p_void.getCPtr(fi));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void helicsFederateInfoLoadFromArgs(SWIGTYPE_p_void fi, int argc, SWIGTYPE_p_p_char argv) {
    helicsPINVOKE.helicsFederateInfoLoadFromArgs(SWIGTYPE_p_void.getCPtr(fi), argc, SWIGTYPE_p_p_char.getCPtr(argv));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateInfoFree(SWIGTYPE_p_void fi) {
    helicsPINVOKE.helicsFederateInfoFree(SWIGTYPE_p_void.getCPtr(fi));
  }

  public static int helicsFederateIsValid(SWIGTYPE_p_void fed) {
    int ret = helicsPINVOKE.helicsFederateIsValid(SWIGTYPE_p_void.getCPtr(fed));
    return ret;
  }

  public static void helicsFederateInfoSetCoreName(SWIGTYPE_p_void fi, string corename) {
    helicsPINVOKE.helicsFederateInfoSetCoreName(SWIGTYPE_p_void.getCPtr(fi), corename);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateInfoSetCoreInitString(SWIGTYPE_p_void fi, string coreInit) {
    helicsPINVOKE.helicsFederateInfoSetCoreInitString(SWIGTYPE_p_void.getCPtr(fi), coreInit);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateInfoSetBrokerInitString(SWIGTYPE_p_void fi, string brokerInit) {
    helicsPINVOKE.helicsFederateInfoSetBrokerInitString(SWIGTYPE_p_void.getCPtr(fi), brokerInit);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateInfoSetCoreType(SWIGTYPE_p_void fi, int coretype) {
    helicsPINVOKE.helicsFederateInfoSetCoreType(SWIGTYPE_p_void.getCPtr(fi), coretype);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateInfoSetCoreTypeFromString(SWIGTYPE_p_void fi, string coretype) {
    helicsPINVOKE.helicsFederateInfoSetCoreTypeFromString(SWIGTYPE_p_void.getCPtr(fi), coretype);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateInfoSetBroker(SWIGTYPE_p_void fi, string broker) {
    helicsPINVOKE.helicsFederateInfoSetBroker(SWIGTYPE_p_void.getCPtr(fi), broker);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateInfoSetBrokerKey(SWIGTYPE_p_void fi, string brokerkey) {
    helicsPINVOKE.helicsFederateInfoSetBrokerKey(SWIGTYPE_p_void.getCPtr(fi), brokerkey);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateInfoSetBrokerPort(SWIGTYPE_p_void fi, int brokerPort) {
    helicsPINVOKE.helicsFederateInfoSetBrokerPort(SWIGTYPE_p_void.getCPtr(fi), brokerPort);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateInfoSetLocalPort(SWIGTYPE_p_void fi, string localPort) {
    helicsPINVOKE.helicsFederateInfoSetLocalPort(SWIGTYPE_p_void.getCPtr(fi), localPort);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int helicsGetPropertyIndex(string val) {
    int ret = helicsPINVOKE.helicsGetPropertyIndex(val);
    return ret;
  }

  public static int helicsGetFlagIndex(string val) {
    int ret = helicsPINVOKE.helicsGetFlagIndex(val);
    return ret;
  }

  public static int helicsGetOptionIndex(string val) {
    int ret = helicsPINVOKE.helicsGetOptionIndex(val);
    return ret;
  }

  public static int helicsGetOptionValue(string val) {
    int ret = helicsPINVOKE.helicsGetOptionValue(val);
    return ret;
  }

  public static void helicsFederateInfoSetFlagOption(SWIGTYPE_p_void fi, int flag, int value) {
    helicsPINVOKE.helicsFederateInfoSetFlagOption(SWIGTYPE_p_void.getCPtr(fi), flag, value);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateInfoSetSeparator(SWIGTYPE_p_void fi, char separator) {
    helicsPINVOKE.helicsFederateInfoSetSeparator(SWIGTYPE_p_void.getCPtr(fi), separator);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateInfoSetTimeProperty(SWIGTYPE_p_void fi, int timeProperty, double propertyValue) {
    helicsPINVOKE.helicsFederateInfoSetTimeProperty(SWIGTYPE_p_void.getCPtr(fi), timeProperty, propertyValue);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateInfoSetIntegerProperty(SWIGTYPE_p_void fi, int intProperty, int propertyValue) {
    helicsPINVOKE.helicsFederateInfoSetIntegerProperty(SWIGTYPE_p_void.getCPtr(fi), intProperty, propertyValue);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateRegisterInterfaces(SWIGTYPE_p_void fed, string file) {
    helicsPINVOKE.helicsFederateRegisterInterfaces(SWIGTYPE_p_void.getCPtr(fed), file);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateGlobalError(SWIGTYPE_p_void fed, int error_code, string error_string) {
    helicsPINVOKE.helicsFederateGlobalError(SWIGTYPE_p_void.getCPtr(fed), error_code, error_string);
  }

  public static void helicsFederateLocalError(SWIGTYPE_p_void fed, int error_code, string error_string) {
    helicsPINVOKE.helicsFederateLocalError(SWIGTYPE_p_void.getCPtr(fed), error_code, error_string);
  }

  public static void helicsFederateFinalize(SWIGTYPE_p_void fed) {
    helicsPINVOKE.helicsFederateFinalize(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateFinalizeAsync(SWIGTYPE_p_void fed) {
    helicsPINVOKE.helicsFederateFinalizeAsync(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateFinalizeComplete(SWIGTYPE_p_void fed) {
    helicsPINVOKE.helicsFederateFinalizeComplete(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateFree(SWIGTYPE_p_void fed) {
    helicsPINVOKE.helicsFederateFree(SWIGTYPE_p_void.getCPtr(fed));
  }

  public static void helicsCloseLibrary() {
    helicsPINVOKE.helicsCloseLibrary();
  }

  public static void helicsFederateEnterInitializingMode(SWIGTYPE_p_void fed) {
    helicsPINVOKE.helicsFederateEnterInitializingMode(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateEnterInitializingModeAsync(SWIGTYPE_p_void fed) {
    helicsPINVOKE.helicsFederateEnterInitializingModeAsync(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int helicsFederateIsAsyncOperationCompleted(SWIGTYPE_p_void fed) {
    int ret = helicsPINVOKE.helicsFederateIsAsyncOperationCompleted(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void helicsFederateEnterInitializingModeComplete(SWIGTYPE_p_void fed) {
    helicsPINVOKE.helicsFederateEnterInitializingModeComplete(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateEnterExecutingMode(SWIGTYPE_p_void fed) {
    helicsPINVOKE.helicsFederateEnterExecutingMode(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateEnterExecutingModeAsync(SWIGTYPE_p_void fed) {
    helicsPINVOKE.helicsFederateEnterExecutingModeAsync(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateEnterExecutingModeComplete(SWIGTYPE_p_void fed) {
    helicsPINVOKE.helicsFederateEnterExecutingModeComplete(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static helics_iteration_result helicsFederateEnterExecutingModeIterative(SWIGTYPE_p_void fed, helics_iteration_request iterate) {
    helics_iteration_result ret = (helics_iteration_result)helicsPINVOKE.helicsFederateEnterExecutingModeIterative(SWIGTYPE_p_void.getCPtr(fed), (int)iterate);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void helicsFederateEnterExecutingModeIterativeAsync(SWIGTYPE_p_void fed, helics_iteration_request iterate) {
    helicsPINVOKE.helicsFederateEnterExecutingModeIterativeAsync(SWIGTYPE_p_void.getCPtr(fed), (int)iterate);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static helics_iteration_result helicsFederateEnterExecutingModeIterativeComplete(SWIGTYPE_p_void fed) {
    helics_iteration_result ret = (helics_iteration_result)helicsPINVOKE.helicsFederateEnterExecutingModeIterativeComplete(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static helics_federate_state helicsFederateGetState(SWIGTYPE_p_void fed) {
    helics_federate_state ret = (helics_federate_state)helicsPINVOKE.helicsFederateGetState(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateGetCoreObject(SWIGTYPE_p_void fed) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateGetCoreObject(SWIGTYPE_p_void.getCPtr(fed));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double helicsFederateRequestTime(SWIGTYPE_p_void fed, double requestTime) {
    double ret = helicsPINVOKE.helicsFederateRequestTime(SWIGTYPE_p_void.getCPtr(fed), requestTime);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double helicsFederateRequestTimeAdvance(SWIGTYPE_p_void fed, double timeDelta) {
    double ret = helicsPINVOKE.helicsFederateRequestTimeAdvance(SWIGTYPE_p_void.getCPtr(fed), timeDelta);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double helicsFederateRequestNextStep(SWIGTYPE_p_void fed) {
    double ret = helicsPINVOKE.helicsFederateRequestNextStep(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double helicsFederateRequestTimeIterative(SWIGTYPE_p_void fed, double requestTime, helics_iteration_request iterate, out int outIteration) {
    double ret = helicsPINVOKE.helicsFederateRequestTimeIterative(SWIGTYPE_p_void.getCPtr(fed), requestTime, (int)iterate, out outIteration);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void helicsFederateRequestTimeAsync(SWIGTYPE_p_void fed, double requestTime) {
    helicsPINVOKE.helicsFederateRequestTimeAsync(SWIGTYPE_p_void.getCPtr(fed), requestTime);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static double helicsFederateRequestTimeComplete(SWIGTYPE_p_void fed) {
    double ret = helicsPINVOKE.helicsFederateRequestTimeComplete(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void helicsFederateRequestTimeIterativeAsync(SWIGTYPE_p_void fed, double requestTime, helics_iteration_request iterate) {
    helicsPINVOKE.helicsFederateRequestTimeIterativeAsync(SWIGTYPE_p_void.getCPtr(fed), requestTime, (int)iterate);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static double helicsFederateRequestTimeIterativeComplete(SWIGTYPE_p_void fed, out int outIterate) {
    double ret = helicsPINVOKE.helicsFederateRequestTimeIterativeComplete(SWIGTYPE_p_void.getCPtr(fed), out outIterate);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string helicsFederateGetName(SWIGTYPE_p_void fed) {
    string ret = helicsPINVOKE.helicsFederateGetName(SWIGTYPE_p_void.getCPtr(fed));
    return ret;
  }

  public static void helicsFederateSetTimeProperty(SWIGTYPE_p_void fed, int timeProperty, double time) {
    helicsPINVOKE.helicsFederateSetTimeProperty(SWIGTYPE_p_void.getCPtr(fed), timeProperty, time);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateSetFlagOption(SWIGTYPE_p_void fed, int flag, int flagValue) {
    helicsPINVOKE.helicsFederateSetFlagOption(SWIGTYPE_p_void.getCPtr(fed), flag, flagValue);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateSetSeparator(SWIGTYPE_p_void fed, char separator) {
    helicsPINVOKE.helicsFederateSetSeparator(SWIGTYPE_p_void.getCPtr(fed), separator);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateSetIntegerProperty(SWIGTYPE_p_void fed, int intProperty, int propertyVal) {
    helicsPINVOKE.helicsFederateSetIntegerProperty(SWIGTYPE_p_void.getCPtr(fed), intProperty, propertyVal);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static double helicsFederateGetTimeProperty(SWIGTYPE_p_void fed, int timeProperty) {
    double ret = helicsPINVOKE.helicsFederateGetTimeProperty(SWIGTYPE_p_void.getCPtr(fed), timeProperty);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int helicsFederateGetFlagOption(SWIGTYPE_p_void fed, int flag) {
    int ret = helicsPINVOKE.helicsFederateGetFlagOption(SWIGTYPE_p_void.getCPtr(fed), flag);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int helicsFederateGetIntegerProperty(SWIGTYPE_p_void fed, int intProperty) {
    int ret = helicsPINVOKE.helicsFederateGetIntegerProperty(SWIGTYPE_p_void.getCPtr(fed), intProperty);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double helicsFederateGetCurrentTime(SWIGTYPE_p_void fed) {
    double ret = helicsPINVOKE.helicsFederateGetCurrentTime(SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void helicsFederateSetGlobal(SWIGTYPE_p_void fed, string valueName, string value) {
    helicsPINVOKE.helicsFederateSetGlobal(SWIGTYPE_p_void.getCPtr(fed), valueName, value);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateAddDependency(SWIGTYPE_p_void fed, string fedName) {
    helicsPINVOKE.helicsFederateAddDependency(SWIGTYPE_p_void.getCPtr(fed), fedName);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateSetLogFile(SWIGTYPE_p_void fed, string logFile) {
    helicsPINVOKE.helicsFederateSetLogFile(SWIGTYPE_p_void.getCPtr(fed), logFile);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateLogErrorMessage(SWIGTYPE_p_void fed, string logmessage) {
    helicsPINVOKE.helicsFederateLogErrorMessage(SWIGTYPE_p_void.getCPtr(fed), logmessage);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateLogWarningMessage(SWIGTYPE_p_void fed, string logmessage) {
    helicsPINVOKE.helicsFederateLogWarningMessage(SWIGTYPE_p_void.getCPtr(fed), logmessage);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateLogInfoMessage(SWIGTYPE_p_void fed, string logmessage) {
    helicsPINVOKE.helicsFederateLogInfoMessage(SWIGTYPE_p_void.getCPtr(fed), logmessage);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateLogDebugMessage(SWIGTYPE_p_void fed, string logmessage) {
    helicsPINVOKE.helicsFederateLogDebugMessage(SWIGTYPE_p_void.getCPtr(fed), logmessage);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederateLogLevelMessage(SWIGTYPE_p_void fed, int loglevel, string logmessage) {
    helicsPINVOKE.helicsFederateLogLevelMessage(SWIGTYPE_p_void.getCPtr(fed), loglevel, logmessage);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsCoreSetGlobal(SWIGTYPE_p_void core, string valueName, string value) {
    helicsPINVOKE.helicsCoreSetGlobal(SWIGTYPE_p_void.getCPtr(core), valueName, value);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsBrokerSetGlobal(SWIGTYPE_p_void broker, string valueName, string value) {
    helicsPINVOKE.helicsBrokerSetGlobal(SWIGTYPE_p_void.getCPtr(broker), valueName, value);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsCoreSetLogFile(SWIGTYPE_p_void core, string logFileName) {
    helicsPINVOKE.helicsCoreSetLogFile(SWIGTYPE_p_void.getCPtr(core), logFileName);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsBrokerSetLogFile(SWIGTYPE_p_void broker, string logFileName) {
    helicsPINVOKE.helicsBrokerSetLogFile(SWIGTYPE_p_void.getCPtr(broker), logFileName);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsBrokerSetTimeBarrier(SWIGTYPE_p_void broker, double barrierTime) {
    helicsPINVOKE.helicsBrokerSetTimeBarrier(SWIGTYPE_p_void.getCPtr(broker), barrierTime);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsBrokerClearTimeBarrier(SWIGTYPE_p_void broker) {
    helicsPINVOKE.helicsBrokerClearTimeBarrier(SWIGTYPE_p_void.getCPtr(broker));
  }

  public static SWIGTYPE_p_void helicsCreateQuery(string target, string query) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsCreateQuery(target, query);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static string helicsQueryExecute(SWIGTYPE_p_void query, SWIGTYPE_p_void fed) {
    string ret = helicsPINVOKE.helicsQueryExecute(SWIGTYPE_p_void.getCPtr(query), SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string helicsQueryCoreExecute(SWIGTYPE_p_void query, SWIGTYPE_p_void core) {
    string ret = helicsPINVOKE.helicsQueryCoreExecute(SWIGTYPE_p_void.getCPtr(query), SWIGTYPE_p_void.getCPtr(core));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string helicsQueryBrokerExecute(SWIGTYPE_p_void query, SWIGTYPE_p_void broker) {
    string ret = helicsPINVOKE.helicsQueryBrokerExecute(SWIGTYPE_p_void.getCPtr(query), SWIGTYPE_p_void.getCPtr(broker));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void helicsQueryExecuteAsync(SWIGTYPE_p_void query, SWIGTYPE_p_void fed) {
    helicsPINVOKE.helicsQueryExecuteAsync(SWIGTYPE_p_void.getCPtr(query), SWIGTYPE_p_void.getCPtr(fed));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string helicsQueryExecuteComplete(SWIGTYPE_p_void query) {
    string ret = helicsPINVOKE.helicsQueryExecuteComplete(SWIGTYPE_p_void.getCPtr(query));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int helicsQueryIsCompleted(SWIGTYPE_p_void query) {
    int ret = helicsPINVOKE.helicsQueryIsCompleted(SWIGTYPE_p_void.getCPtr(query));
    return ret;
  }

  public static void helicsQuerySetTarget(SWIGTYPE_p_void query, string target) {
    helicsPINVOKE.helicsQuerySetTarget(SWIGTYPE_p_void.getCPtr(query), target);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsQuerySetQueryString(SWIGTYPE_p_void query, string queryString) {
    helicsPINVOKE.helicsQuerySetQueryString(SWIGTYPE_p_void.getCPtr(query), queryString);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsQueryFree(SWIGTYPE_p_void query) {
    helicsPINVOKE.helicsQueryFree(SWIGTYPE_p_void.getCPtr(query));
  }

  public static void helicsCleanupLibrary() {
    helicsPINVOKE.helicsCleanupLibrary();
  }

  public static SWIGTYPE_p_void helicsFederateRegisterSubscription(SWIGTYPE_p_void fed, string key, string units) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateRegisterSubscription(SWIGTYPE_p_void.getCPtr(fed), key, units);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateRegisterPublication(SWIGTYPE_p_void fed, string key, helics_data_type type, string units) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateRegisterPublication(SWIGTYPE_p_void.getCPtr(fed), key, (int)type, units);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateRegisterTypePublication(SWIGTYPE_p_void fed, string key, string type, string units) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateRegisterTypePublication(SWIGTYPE_p_void.getCPtr(fed), key, type, units);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateRegisterGlobalPublication(SWIGTYPE_p_void fed, string key, helics_data_type type, string units) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateRegisterGlobalPublication(SWIGTYPE_p_void.getCPtr(fed), key, (int)type, units);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateRegisterGlobalTypePublication(SWIGTYPE_p_void fed, string key, string type, string units) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateRegisterGlobalTypePublication(SWIGTYPE_p_void.getCPtr(fed), key, type, units);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateRegisterInput(SWIGTYPE_p_void fed, string key, helics_data_type type, string units) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateRegisterInput(SWIGTYPE_p_void.getCPtr(fed), key, (int)type, units);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateRegisterTypeInput(SWIGTYPE_p_void fed, string key, string type, string units) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateRegisterTypeInput(SWIGTYPE_p_void.getCPtr(fed), key, type, units);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateRegisterGlobalInput(SWIGTYPE_p_void fed, string key, helics_data_type type, string units) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateRegisterGlobalInput(SWIGTYPE_p_void.getCPtr(fed), key, (int)type, units);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateRegisterGlobalTypeInput(SWIGTYPE_p_void fed, string key, string type, string units) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateRegisterGlobalTypeInput(SWIGTYPE_p_void.getCPtr(fed), key, type, units);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateGetPublication(SWIGTYPE_p_void fed, string key) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateGetPublication(SWIGTYPE_p_void.getCPtr(fed), key);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateGetPublicationByIndex(SWIGTYPE_p_void fed, int index) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateGetPublicationByIndex(SWIGTYPE_p_void.getCPtr(fed), index);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateGetInput(SWIGTYPE_p_void fed, string key) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateGetInput(SWIGTYPE_p_void.getCPtr(fed), key);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateGetInputByIndex(SWIGTYPE_p_void fed, int index) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateGetInputByIndex(SWIGTYPE_p_void.getCPtr(fed), index);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateGetSubscription(SWIGTYPE_p_void fed, string key) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateGetSubscription(SWIGTYPE_p_void.getCPtr(fed), key);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void helicsFederateClearUpdates(SWIGTYPE_p_void fed) {
    helicsPINVOKE.helicsFederateClearUpdates(SWIGTYPE_p_void.getCPtr(fed));
  }

  public static void helicsFederateRegisterFromPublicationJSON(SWIGTYPE_p_void fed, string json) {
    helicsPINVOKE.helicsFederateRegisterFromPublicationJSON(SWIGTYPE_p_void.getCPtr(fed), json);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFederatePublishJSON(SWIGTYPE_p_void fed, string json) {
    helicsPINVOKE.helicsFederatePublishJSON(SWIGTYPE_p_void.getCPtr(fed), json);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int helicsPublicationIsValid(SWIGTYPE_p_void pub) {
    int ret = helicsPINVOKE.helicsPublicationIsValid(SWIGTYPE_p_void.getCPtr(pub));
    return ret;
  }

  public static void helicsPublicationPublishRaw(SWIGTYPE_p_void pub, SWIGTYPE_p_void data, int inputDataLength) {
    helicsPINVOKE.helicsPublicationPublishRaw(SWIGTYPE_p_void.getCPtr(pub), SWIGTYPE_p_void.getCPtr(data), inputDataLength);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsPublicationPublishString(SWIGTYPE_p_void pub, string str) {
    helicsPINVOKE.helicsPublicationPublishString(SWIGTYPE_p_void.getCPtr(pub), str);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsPublicationPublishInteger(SWIGTYPE_p_void pub, long val) {
    helicsPINVOKE.helicsPublicationPublishInteger(SWIGTYPE_p_void.getCPtr(pub), val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsPublicationPublishBoolean(SWIGTYPE_p_void pub, int val) {
    helicsPINVOKE.helicsPublicationPublishBoolean(SWIGTYPE_p_void.getCPtr(pub), val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsPublicationPublishDouble(SWIGTYPE_p_void pub, double val) {
    helicsPINVOKE.helicsPublicationPublishDouble(SWIGTYPE_p_void.getCPtr(pub), val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsPublicationPublishTime(SWIGTYPE_p_void pub, double val) {
    helicsPINVOKE.helicsPublicationPublishTime(SWIGTYPE_p_void.getCPtr(pub), val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsPublicationPublishChar(SWIGTYPE_p_void pub, char val) {
    helicsPINVOKE.helicsPublicationPublishChar(SWIGTYPE_p_void.getCPtr(pub), val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsPublicationPublishComplex(SWIGTYPE_p_void pub, double real, double imag) {
    helicsPINVOKE.helicsPublicationPublishComplex(SWIGTYPE_p_void.getCPtr(pub), real, imag);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsPublicationPublishVector(SWIGTYPE_p_void pub, out double vectorInput, int vectorLength) {
    helicsPINVOKE.helicsPublicationPublishVector(SWIGTYPE_p_void.getCPtr(pub), out vectorInput, vectorLength);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsPublicationPublishNamedPoint(SWIGTYPE_p_void pub, string str, double val) {
    helicsPINVOKE.helicsPublicationPublishNamedPoint(SWIGTYPE_p_void.getCPtr(pub), str, val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsPublicationAddTarget(SWIGTYPE_p_void pub, string target) {
    helicsPINVOKE.helicsPublicationAddTarget(SWIGTYPE_p_void.getCPtr(pub), target);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int helicsInputIsValid(SWIGTYPE_p_void ipt) {
    int ret = helicsPINVOKE.helicsInputIsValid(SWIGTYPE_p_void.getCPtr(ipt));
    return ret;
  }

  public static void helicsInputAddTarget(SWIGTYPE_p_void ipt, string target) {
    helicsPINVOKE.helicsInputAddTarget(SWIGTYPE_p_void.getCPtr(ipt), target);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int helicsInputGetRawValueSize(SWIGTYPE_p_void ipt) {
    int ret = helicsPINVOKE.helicsInputGetRawValueSize(SWIGTYPE_p_void.getCPtr(ipt));
    return ret;
  }

  public static void helicsInputGetRawValue(SWIGTYPE_p_void ipt, SWIGTYPE_p_void data, int maxDataLength, out int actualSize) {
    helicsPINVOKE.helicsInputGetRawValue(SWIGTYPE_p_void.getCPtr(ipt), SWIGTYPE_p_void.getCPtr(data), maxDataLength, out actualSize);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int helicsInputGetStringSize(SWIGTYPE_p_void ipt) {
    int ret = helicsPINVOKE.helicsInputGetStringSize(SWIGTYPE_p_void.getCPtr(ipt));
    return ret;
  }

  public static void helicsInputGetString(SWIGTYPE_p_void ipt, string outputString, int maxStringLength, out int actualLength) {
    helicsPINVOKE.helicsInputGetString(SWIGTYPE_p_void.getCPtr(ipt), outputString, maxStringLength, out actualLength);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static long helicsInputGetInteger(SWIGTYPE_p_void ipt) {
    long ret = helicsPINVOKE.helicsInputGetInteger(SWIGTYPE_p_void.getCPtr(ipt));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int helicsInputGetBoolean(SWIGTYPE_p_void ipt) {
    int ret = helicsPINVOKE.helicsInputGetBoolean(SWIGTYPE_p_void.getCPtr(ipt));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double helicsInputGetDouble(SWIGTYPE_p_void ipt) {
    double ret = helicsPINVOKE.helicsInputGetDouble(SWIGTYPE_p_void.getCPtr(ipt));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double helicsInputGetTime(SWIGTYPE_p_void ipt) {
    double ret = helicsPINVOKE.helicsInputGetTime(SWIGTYPE_p_void.getCPtr(ipt));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static char helicsInputGetChar(SWIGTYPE_p_void ipt) {
    char ret = helicsPINVOKE.helicsInputGetChar(SWIGTYPE_p_void.getCPtr(ipt));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static helics_complex helicsInputGetComplexObject(SWIGTYPE_p_void ipt) {
    helics_complex ret = new helics_complex(helicsPINVOKE.helicsInputGetComplexObject(SWIGTYPE_p_void.getCPtr(ipt)), true);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void helicsInputGetComplex(SWIGTYPE_p_void ipt, out double real, out double imag) {
    helicsPINVOKE.helicsInputGetComplex(SWIGTYPE_p_void.getCPtr(ipt), out real, out imag);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int helicsInputGetVectorSize(SWIGTYPE_p_void ipt) {
    int ret = helicsPINVOKE.helicsInputGetVectorSize(SWIGTYPE_p_void.getCPtr(ipt));
    return ret;
  }

  public static void helicsInputGetVector(SWIGTYPE_p_void ipt, SWIGTYPE_p_double data, int maxLength, out int actualSize) {
    helicsPINVOKE.helicsInputGetVector(SWIGTYPE_p_void.getCPtr(ipt), SWIGTYPE_p_double.getCPtr(data), maxLength, out actualSize);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsInputGetNamedPoint(SWIGTYPE_p_void ipt, string outputString, int maxStringLength, out int actualLength, out double val) {
    helicsPINVOKE.helicsInputGetNamedPoint(SWIGTYPE_p_void.getCPtr(ipt), outputString, maxStringLength, out actualLength, out val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsInputSetDefaultRaw(SWIGTYPE_p_void ipt, SWIGTYPE_p_void data, int inputDataLength) {
    helicsPINVOKE.helicsInputSetDefaultRaw(SWIGTYPE_p_void.getCPtr(ipt), SWIGTYPE_p_void.getCPtr(data), inputDataLength);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsInputSetDefaultString(SWIGTYPE_p_void ipt, string str) {
    helicsPINVOKE.helicsInputSetDefaultString(SWIGTYPE_p_void.getCPtr(ipt), str);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsInputSetDefaultInteger(SWIGTYPE_p_void ipt, long val) {
    helicsPINVOKE.helicsInputSetDefaultInteger(SWIGTYPE_p_void.getCPtr(ipt), val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsInputSetDefaultBoolean(SWIGTYPE_p_void ipt, int val) {
    helicsPINVOKE.helicsInputSetDefaultBoolean(SWIGTYPE_p_void.getCPtr(ipt), val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsInputSetDefaultTime(SWIGTYPE_p_void ipt, double val) {
    helicsPINVOKE.helicsInputSetDefaultTime(SWIGTYPE_p_void.getCPtr(ipt), val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsInputSetDefaultChar(SWIGTYPE_p_void ipt, char val) {
    helicsPINVOKE.helicsInputSetDefaultChar(SWIGTYPE_p_void.getCPtr(ipt), val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsInputSetDefaultDouble(SWIGTYPE_p_void ipt, double val) {
    helicsPINVOKE.helicsInputSetDefaultDouble(SWIGTYPE_p_void.getCPtr(ipt), val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsInputSetDefaultComplex(SWIGTYPE_p_void ipt, double real, double imag) {
    helicsPINVOKE.helicsInputSetDefaultComplex(SWIGTYPE_p_void.getCPtr(ipt), real, imag);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsInputSetDefaultVector(SWIGTYPE_p_void ipt, out double vectorInput, int vectorLength) {
    helicsPINVOKE.helicsInputSetDefaultVector(SWIGTYPE_p_void.getCPtr(ipt), out vectorInput, vectorLength);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsInputSetDefaultNamedPoint(SWIGTYPE_p_void ipt, string str, double val) {
    helicsPINVOKE.helicsInputSetDefaultNamedPoint(SWIGTYPE_p_void.getCPtr(ipt), str, val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string helicsInputGetType(SWIGTYPE_p_void ipt) {
    string ret = helicsPINVOKE.helicsInputGetType(SWIGTYPE_p_void.getCPtr(ipt));
    return ret;
  }

  public static string helicsInputGetPublicationType(SWIGTYPE_p_void ipt) {
    string ret = helicsPINVOKE.helicsInputGetPublicationType(SWIGTYPE_p_void.getCPtr(ipt));
    return ret;
  }

  public static string helicsPublicationGetType(SWIGTYPE_p_void pub) {
    string ret = helicsPINVOKE.helicsPublicationGetType(SWIGTYPE_p_void.getCPtr(pub));
    return ret;
  }

  public static string helicsInputGetKey(SWIGTYPE_p_void ipt) {
    string ret = helicsPINVOKE.helicsInputGetKey(SWIGTYPE_p_void.getCPtr(ipt));
    return ret;
  }

  public static string helicsSubscriptionGetKey(SWIGTYPE_p_void ipt) {
    string ret = helicsPINVOKE.helicsSubscriptionGetKey(SWIGTYPE_p_void.getCPtr(ipt));
    return ret;
  }

  public static string helicsPublicationGetKey(SWIGTYPE_p_void pub) {
    string ret = helicsPINVOKE.helicsPublicationGetKey(SWIGTYPE_p_void.getCPtr(pub));
    return ret;
  }

  public static string helicsInputGetUnits(SWIGTYPE_p_void ipt) {
    string ret = helicsPINVOKE.helicsInputGetUnits(SWIGTYPE_p_void.getCPtr(ipt));
    return ret;
  }

  public static string helicsInputGetInjectionUnits(SWIGTYPE_p_void ipt) {
    string ret = helicsPINVOKE.helicsInputGetInjectionUnits(SWIGTYPE_p_void.getCPtr(ipt));
    return ret;
  }

  public static string helicsInputGetExtractionUnits(SWIGTYPE_p_void ipt) {
    string ret = helicsPINVOKE.helicsInputGetExtractionUnits(SWIGTYPE_p_void.getCPtr(ipt));
    return ret;
  }

  public static string helicsPublicationGetUnits(SWIGTYPE_p_void pub) {
    string ret = helicsPINVOKE.helicsPublicationGetUnits(SWIGTYPE_p_void.getCPtr(pub));
    return ret;
  }

  public static string helicsInputGetInfo(SWIGTYPE_p_void inp) {
    string ret = helicsPINVOKE.helicsInputGetInfo(SWIGTYPE_p_void.getCPtr(inp));
    return ret;
  }

  public static void helicsInputSetInfo(SWIGTYPE_p_void inp, string info) {
    helicsPINVOKE.helicsInputSetInfo(SWIGTYPE_p_void.getCPtr(inp), info);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string helicsPublicationGetInfo(SWIGTYPE_p_void pub) {
    string ret = helicsPINVOKE.helicsPublicationGetInfo(SWIGTYPE_p_void.getCPtr(pub));
    return ret;
  }

  public static void helicsPublicationSetInfo(SWIGTYPE_p_void pub, string info) {
    helicsPINVOKE.helicsPublicationSetInfo(SWIGTYPE_p_void.getCPtr(pub), info);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int helicsInputGetOption(SWIGTYPE_p_void inp, int option) {
    int ret = helicsPINVOKE.helicsInputGetOption(SWIGTYPE_p_void.getCPtr(inp), option);
    return ret;
  }

  public static void helicsInputSetOption(SWIGTYPE_p_void inp, int option, int value) {
    helicsPINVOKE.helicsInputSetOption(SWIGTYPE_p_void.getCPtr(inp), option, value);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int helicsPublicationGetOption(SWIGTYPE_p_void pub, int option) {
    int ret = helicsPINVOKE.helicsPublicationGetOption(SWIGTYPE_p_void.getCPtr(pub), option);
    return ret;
  }

  public static void helicsPublicationSetOption(SWIGTYPE_p_void pub, int option, int val) {
    helicsPINVOKE.helicsPublicationSetOption(SWIGTYPE_p_void.getCPtr(pub), option, val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsPublicationSetMinimumChange(SWIGTYPE_p_void pub, double tolerance) {
    helicsPINVOKE.helicsPublicationSetMinimumChange(SWIGTYPE_p_void.getCPtr(pub), tolerance);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsInputSetMinimumChange(SWIGTYPE_p_void inp, double tolerance) {
    helicsPINVOKE.helicsInputSetMinimumChange(SWIGTYPE_p_void.getCPtr(inp), tolerance);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int helicsInputIsUpdated(SWIGTYPE_p_void ipt) {
    int ret = helicsPINVOKE.helicsInputIsUpdated(SWIGTYPE_p_void.getCPtr(ipt));
    return ret;
  }

  public static double helicsInputLastUpdateTime(SWIGTYPE_p_void ipt) {
    double ret = helicsPINVOKE.helicsInputLastUpdateTime(SWIGTYPE_p_void.getCPtr(ipt));
    return ret;
  }

  public static void helicsInputClearUpdate(SWIGTYPE_p_void ipt) {
    helicsPINVOKE.helicsInputClearUpdate(SWIGTYPE_p_void.getCPtr(ipt));
  }

  public static int helicsFederateGetPublicationCount(SWIGTYPE_p_void fed) {
    int ret = helicsPINVOKE.helicsFederateGetPublicationCount(SWIGTYPE_p_void.getCPtr(fed));
    return ret;
  }

  public static int helicsFederateGetInputCount(SWIGTYPE_p_void fed) {
    int ret = helicsPINVOKE.helicsFederateGetInputCount(SWIGTYPE_p_void.getCPtr(fed));
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateRegisterEndpoint(SWIGTYPE_p_void fed, string name, string type) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateRegisterEndpoint(SWIGTYPE_p_void.getCPtr(fed), name, type);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateRegisterGlobalEndpoint(SWIGTYPE_p_void fed, string name, string type) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateRegisterGlobalEndpoint(SWIGTYPE_p_void.getCPtr(fed), name, type);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateGetEndpoint(SWIGTYPE_p_void fed, string name) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateGetEndpoint(SWIGTYPE_p_void.getCPtr(fed), name);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateGetEndpointByIndex(SWIGTYPE_p_void fed, int index) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateGetEndpointByIndex(SWIGTYPE_p_void.getCPtr(fed), index);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int helicsEndpointIsValid(SWIGTYPE_p_void endpoint) {
    int ret = helicsPINVOKE.helicsEndpointIsValid(SWIGTYPE_p_void.getCPtr(endpoint));
    return ret;
  }

  public static void helicsEndpointSetDefaultDestination(SWIGTYPE_p_void endpoint, string dst) {
    helicsPINVOKE.helicsEndpointSetDefaultDestination(SWIGTYPE_p_void.getCPtr(endpoint), dst);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string helicsEndpointGetDefaultDestination(SWIGTYPE_p_void endpoint) {
    string ret = helicsPINVOKE.helicsEndpointGetDefaultDestination(SWIGTYPE_p_void.getCPtr(endpoint));
    return ret;
  }

  public static void helicsEndpointSendMessageRaw(SWIGTYPE_p_void endpoint, string dst, SWIGTYPE_p_void data, int inputDataLength) {
    helicsPINVOKE.helicsEndpointSendMessageRaw(SWIGTYPE_p_void.getCPtr(endpoint), dst, SWIGTYPE_p_void.getCPtr(data), inputDataLength);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsEndpointSendEventRaw(SWIGTYPE_p_void endpoint, string dst, SWIGTYPE_p_void data, int inputDataLength, double time) {
    helicsPINVOKE.helicsEndpointSendEventRaw(SWIGTYPE_p_void.getCPtr(endpoint), dst, SWIGTYPE_p_void.getCPtr(data), inputDataLength, time);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsEndpointSendMessage(SWIGTYPE_p_void endpoint, helics_message message) {
    helicsPINVOKE.helicsEndpointSendMessage(SWIGTYPE_p_void.getCPtr(endpoint), helics_message.getCPtr(message));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsEndpointSendMessageObject(SWIGTYPE_p_void endpoint, SWIGTYPE_p_void message) {
    helicsPINVOKE.helicsEndpointSendMessageObject(SWIGTYPE_p_void.getCPtr(endpoint), SWIGTYPE_p_void.getCPtr(message));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsEndpointSendMessageObjectZeroCopy(SWIGTYPE_p_void endpoint, SWIGTYPE_p_void message) {
    helicsPINVOKE.helicsEndpointSendMessageObjectZeroCopy(SWIGTYPE_p_void.getCPtr(endpoint), SWIGTYPE_p_void.getCPtr(message));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsEndpointSubscribe(SWIGTYPE_p_void endpoint, string key) {
    helicsPINVOKE.helicsEndpointSubscribe(SWIGTYPE_p_void.getCPtr(endpoint), key);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int helicsFederateHasMessage(SWIGTYPE_p_void fed) {
    int ret = helicsPINVOKE.helicsFederateHasMessage(SWIGTYPE_p_void.getCPtr(fed));
    return ret;
  }

  public static int helicsEndpointHasMessage(SWIGTYPE_p_void endpoint) {
    int ret = helicsPINVOKE.helicsEndpointHasMessage(SWIGTYPE_p_void.getCPtr(endpoint));
    return ret;
  }

  public static int helicsFederatePendingMessages(SWIGTYPE_p_void fed) {
    int ret = helicsPINVOKE.helicsFederatePendingMessages(SWIGTYPE_p_void.getCPtr(fed));
    return ret;
  }

  public static int helicsEndpointPendingMessages(SWIGTYPE_p_void endpoint) {
    int ret = helicsPINVOKE.helicsEndpointPendingMessages(SWIGTYPE_p_void.getCPtr(endpoint));
    return ret;
  }

  public static helics_message helicsEndpointGetMessage(SWIGTYPE_p_void endpoint) {
    helics_message ret = new helics_message(helicsPINVOKE.helicsEndpointGetMessage(SWIGTYPE_p_void.getCPtr(endpoint)), true);
    return ret;
  }

  public static SWIGTYPE_p_void helicsEndpointGetMessageObject(SWIGTYPE_p_void endpoint) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsEndpointGetMessageObject(SWIGTYPE_p_void.getCPtr(endpoint));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void helicsEndpointCreateMessageObject(SWIGTYPE_p_void endpoint) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsEndpointCreateMessageObject(SWIGTYPE_p_void.getCPtr(endpoint));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static helics_message helicsFederateGetMessage(SWIGTYPE_p_void fed) {
    helics_message ret = new helics_message(helicsPINVOKE.helicsFederateGetMessage(SWIGTYPE_p_void.getCPtr(fed)), true);
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateGetMessageObject(SWIGTYPE_p_void fed) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateGetMessageObject(SWIGTYPE_p_void.getCPtr(fed));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateCreateMessageObject(SWIGTYPE_p_void fed) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateCreateMessageObject(SWIGTYPE_p_void.getCPtr(fed));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void helicsFederateClearMessages(SWIGTYPE_p_void fed) {
    helicsPINVOKE.helicsFederateClearMessages(SWIGTYPE_p_void.getCPtr(fed));
  }

  public static void helicsEndpointClearMessages(SWIGTYPE_p_void endpoint) {
    helicsPINVOKE.helicsEndpointClearMessages(SWIGTYPE_p_void.getCPtr(endpoint));
  }

  public static string helicsEndpointGetType(SWIGTYPE_p_void endpoint) {
    string ret = helicsPINVOKE.helicsEndpointGetType(SWIGTYPE_p_void.getCPtr(endpoint));
    return ret;
  }

  public static string helicsEndpointGetName(SWIGTYPE_p_void endpoint) {
    string ret = helicsPINVOKE.helicsEndpointGetName(SWIGTYPE_p_void.getCPtr(endpoint));
    return ret;
  }

  public static int helicsFederateGetEndpointCount(SWIGTYPE_p_void fed) {
    int ret = helicsPINVOKE.helicsFederateGetEndpointCount(SWIGTYPE_p_void.getCPtr(fed));
    return ret;
  }

  public static string helicsEndpointGetInfo(SWIGTYPE_p_void end) {
    string ret = helicsPINVOKE.helicsEndpointGetInfo(SWIGTYPE_p_void.getCPtr(end));
    return ret;
  }

  public static void helicsEndpointSetInfo(SWIGTYPE_p_void endpoint, string info) {
    helicsPINVOKE.helicsEndpointSetInfo(SWIGTYPE_p_void.getCPtr(endpoint), info);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsEndpointSetOption(SWIGTYPE_p_void endpoint, int option, int value) {
    helicsPINVOKE.helicsEndpointSetOption(SWIGTYPE_p_void.getCPtr(endpoint), option, value);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int helicsEndpointGetOption(SWIGTYPE_p_void endpoint, int option) {
    int ret = helicsPINVOKE.helicsEndpointGetOption(SWIGTYPE_p_void.getCPtr(endpoint), option);
    return ret;
  }

  public static string helicsMessageGetSource(SWIGTYPE_p_void message) {
    string ret = helicsPINVOKE.helicsMessageGetSource(SWIGTYPE_p_void.getCPtr(message));
    return ret;
  }

  public static string helicsMessageGetDestination(SWIGTYPE_p_void message) {
    string ret = helicsPINVOKE.helicsMessageGetDestination(SWIGTYPE_p_void.getCPtr(message));
    return ret;
  }

  public static string helicsMessageGetOriginalSource(SWIGTYPE_p_void message) {
    string ret = helicsPINVOKE.helicsMessageGetOriginalSource(SWIGTYPE_p_void.getCPtr(message));
    return ret;
  }

  public static string helicsMessageGetOriginalDestination(SWIGTYPE_p_void message) {
    string ret = helicsPINVOKE.helicsMessageGetOriginalDestination(SWIGTYPE_p_void.getCPtr(message));
    return ret;
  }

  public static double helicsMessageGetTime(SWIGTYPE_p_void message) {
    double ret = helicsPINVOKE.helicsMessageGetTime(SWIGTYPE_p_void.getCPtr(message));
    return ret;
  }

  public static string helicsMessageGetString(SWIGTYPE_p_void message) {
    string ret = helicsPINVOKE.helicsMessageGetString(SWIGTYPE_p_void.getCPtr(message));
    return ret;
  }

  public static int helicsMessageGetMessageID(SWIGTYPE_p_void message) {
    int ret = helicsPINVOKE.helicsMessageGetMessageID(SWIGTYPE_p_void.getCPtr(message));
    return ret;
  }

  public static int helicsMessageCheckFlag(SWIGTYPE_p_void message, int flag) {
    int ret = helicsPINVOKE.helicsMessageCheckFlag(SWIGTYPE_p_void.getCPtr(message), flag);
    return ret;
  }

  public static int helicsMessageGetRawDataSize(SWIGTYPE_p_void message) {
    int ret = helicsPINVOKE.helicsMessageGetRawDataSize(SWIGTYPE_p_void.getCPtr(message));
    return ret;
  }

  public static void helicsMessageGetRawData(SWIGTYPE_p_void message, SWIGTYPE_p_void data, int maxMessageLength, out int actualSize) {
    helicsPINVOKE.helicsMessageGetRawData(SWIGTYPE_p_void.getCPtr(message), SWIGTYPE_p_void.getCPtr(data), maxMessageLength, out actualSize);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int helicsMessageIsValid(SWIGTYPE_p_void message) {
    int ret = helicsPINVOKE.helicsMessageIsValid(SWIGTYPE_p_void.getCPtr(message));
    return ret;
  }

  public static void helicsMessageSetSource(SWIGTYPE_p_void message, string src) {
    helicsPINVOKE.helicsMessageSetSource(SWIGTYPE_p_void.getCPtr(message), src);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsMessageSetDestination(SWIGTYPE_p_void message, string dst) {
    helicsPINVOKE.helicsMessageSetDestination(SWIGTYPE_p_void.getCPtr(message), dst);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsMessageSetOriginalSource(SWIGTYPE_p_void message, string src) {
    helicsPINVOKE.helicsMessageSetOriginalSource(SWIGTYPE_p_void.getCPtr(message), src);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsMessageSetOriginalDestination(SWIGTYPE_p_void message, string dst) {
    helicsPINVOKE.helicsMessageSetOriginalDestination(SWIGTYPE_p_void.getCPtr(message), dst);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsMessageSetTime(SWIGTYPE_p_void message, double time) {
    helicsPINVOKE.helicsMessageSetTime(SWIGTYPE_p_void.getCPtr(message), time);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsMessageReserve(SWIGTYPE_p_void message, int reserveSize) {
    helicsPINVOKE.helicsMessageReserve(SWIGTYPE_p_void.getCPtr(message), reserveSize);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsMessageSetMessageID(SWIGTYPE_p_void message, SWIGTYPE_p_int32_t messageID) {
    helicsPINVOKE.helicsMessageSetMessageID(SWIGTYPE_p_void.getCPtr(message), SWIGTYPE_p_int32_t.getCPtr(messageID));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsMessageClearFlags(SWIGTYPE_p_void message) {
    helicsPINVOKE.helicsMessageClearFlags(SWIGTYPE_p_void.getCPtr(message));
  }

  public static void helicsMessageSetFlagOption(SWIGTYPE_p_void message, int flag, int flagValue) {
    helicsPINVOKE.helicsMessageSetFlagOption(SWIGTYPE_p_void.getCPtr(message), flag, flagValue);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsMessageSetString(SWIGTYPE_p_void message, string str) {
    helicsPINVOKE.helicsMessageSetString(SWIGTYPE_p_void.getCPtr(message), str);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsMessageSetData(SWIGTYPE_p_void message, SWIGTYPE_p_void data, int inputDataLength) {
    helicsPINVOKE.helicsMessageSetData(SWIGTYPE_p_void.getCPtr(message), SWIGTYPE_p_void.getCPtr(data), inputDataLength);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsMessageAppendData(SWIGTYPE_p_void message, SWIGTYPE_p_void data, int inputDataLength) {
    helicsPINVOKE.helicsMessageAppendData(SWIGTYPE_p_void.getCPtr(message), SWIGTYPE_p_void.getCPtr(data), inputDataLength);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsMessageCopy(SWIGTYPE_p_void src_message, SWIGTYPE_p_void dst_message) {
    helicsPINVOKE.helicsMessageCopy(SWIGTYPE_p_void.getCPtr(src_message), SWIGTYPE_p_void.getCPtr(dst_message));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_void helicsMessageClone(SWIGTYPE_p_void message) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsMessageClone(SWIGTYPE_p_void.getCPtr(message));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void helicsMessageFree(SWIGTYPE_p_void message) {
    helicsPINVOKE.helicsMessageFree(SWIGTYPE_p_void.getCPtr(message));
  }

  public static void helicsMessageClear(SWIGTYPE_p_void message) {
    helicsPINVOKE.helicsMessageClear(SWIGTYPE_p_void.getCPtr(message));
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_void helicsFederateRegisterFilter(SWIGTYPE_p_void fed, helics_filter_type type, string name) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateRegisterFilter(SWIGTYPE_p_void.getCPtr(fed), (int)type, name);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateRegisterGlobalFilter(SWIGTYPE_p_void fed, helics_filter_type type, string name) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateRegisterGlobalFilter(SWIGTYPE_p_void.getCPtr(fed), (int)type, name);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateRegisterCloningFilter(SWIGTYPE_p_void fed, string name) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateRegisterCloningFilter(SWIGTYPE_p_void.getCPtr(fed), name);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateRegisterGlobalCloningFilter(SWIGTYPE_p_void fed, string name) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateRegisterGlobalCloningFilter(SWIGTYPE_p_void.getCPtr(fed), name);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsCoreRegisterFilter(SWIGTYPE_p_void core, helics_filter_type type, string name) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsCoreRegisterFilter(SWIGTYPE_p_void.getCPtr(core), (int)type, name);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsCoreRegisterCloningFilter(SWIGTYPE_p_void core, string name) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsCoreRegisterCloningFilter(SWIGTYPE_p_void.getCPtr(core), name);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int helicsFederateGetFilterCount(SWIGTYPE_p_void fed) {
    int ret = helicsPINVOKE.helicsFederateGetFilterCount(SWIGTYPE_p_void.getCPtr(fed));
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateGetFilter(SWIGTYPE_p_void fed, string name) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateGetFilter(SWIGTYPE_p_void.getCPtr(fed), name);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void helicsFederateGetFilterByIndex(SWIGTYPE_p_void fed, int index) {
    global::System.IntPtr cPtr = helicsPINVOKE.helicsFederateGetFilterByIndex(SWIGTYPE_p_void.getCPtr(fed), index);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int helicsFilterIsValid(SWIGTYPE_p_void filt) {
    int ret = helicsPINVOKE.helicsFilterIsValid(SWIGTYPE_p_void.getCPtr(filt));
    return ret;
  }

  public static string helicsFilterGetName(SWIGTYPE_p_void filt) {
    string ret = helicsPINVOKE.helicsFilterGetName(SWIGTYPE_p_void.getCPtr(filt));
    return ret;
  }

  public static void helicsFilterSet(SWIGTYPE_p_void filt, string prop, double val) {
    helicsPINVOKE.helicsFilterSet(SWIGTYPE_p_void.getCPtr(filt), prop, val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFilterSetString(SWIGTYPE_p_void filt, string prop, string val) {
    helicsPINVOKE.helicsFilterSetString(SWIGTYPE_p_void.getCPtr(filt), prop, val);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFilterAddDestinationTarget(SWIGTYPE_p_void filt, string dst) {
    helicsPINVOKE.helicsFilterAddDestinationTarget(SWIGTYPE_p_void.getCPtr(filt), dst);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFilterAddSourceTarget(SWIGTYPE_p_void filt, string source) {
    helicsPINVOKE.helicsFilterAddSourceTarget(SWIGTYPE_p_void.getCPtr(filt), source);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFilterAddDeliveryEndpoint(SWIGTYPE_p_void filt, string deliveryEndpoint) {
    helicsPINVOKE.helicsFilterAddDeliveryEndpoint(SWIGTYPE_p_void.getCPtr(filt), deliveryEndpoint);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFilterRemoveTarget(SWIGTYPE_p_void filt, string target) {
    helicsPINVOKE.helicsFilterRemoveTarget(SWIGTYPE_p_void.getCPtr(filt), target);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFilterRemoveDeliveryEndpoint(SWIGTYPE_p_void filt, string deliveryEndpoint) {
    helicsPINVOKE.helicsFilterRemoveDeliveryEndpoint(SWIGTYPE_p_void.getCPtr(filt), deliveryEndpoint);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string helicsFilterGetInfo(SWIGTYPE_p_void filt) {
    string ret = helicsPINVOKE.helicsFilterGetInfo(SWIGTYPE_p_void.getCPtr(filt));
    return ret;
  }

  public static void helicsFilterSetInfo(SWIGTYPE_p_void filt, string info) {
    helicsPINVOKE.helicsFilterSetInfo(SWIGTYPE_p_void.getCPtr(filt), info);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void helicsFilterSetOption(SWIGTYPE_p_void filt, int option, int value) {
    helicsPINVOKE.helicsFilterSetOption(SWIGTYPE_p_void.getCPtr(filt), option, value);
    if (helicsPINVOKE.SWIGPendingException.Pending) throw helicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int helicsFilterGetOption(SWIGTYPE_p_void filt, int option) {
    int ret = helicsPINVOKE.helicsFilterGetOption(SWIGTYPE_p_void.getCPtr(filt), option);
    return ret;
  }

}

}
namespace gmlc {

public class SWIGTYPE_p_p_char {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_p_char(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_p_char() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_p_char obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace gmlc {

public class SWIGTYPE_p_double {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_double(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_double() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_double obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace gmlc {

public class SWIGTYPE_p_int16_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_int16_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_int16_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_int16_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace gmlc {

public class SWIGTYPE_p_int32_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_int32_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_int32_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_int32_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace gmlc {

public class SWIGTYPE_p_void {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_void(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_void() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_void obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
